================================================================================
                    CALIBRATION PLATFORM - ML MODEL TRAINING SUMMARY
================================================================================

OVERVIEW
--------
This document provides a comprehensive overview of the Machine Learning (ML) model 
training system in the Calibration Platform. The platform implements three main 
types of ML models for sensor data analysis: Anomaly Detection, Drift Prediction, 
and Adaptive Calibration.

================================================================================
1. SYSTEM ARCHITECTURE
================================================================================

1.1 Core Components:
- Backend: Django-based API server
- Frontend: React/TypeScript web application
- ML Models: Scikit-learn based models stored as .joblib files
- Database: SQLite with Django ORM

1.2 Key Directories:
- /sensors/services/ - ML service implementations
- /sensors/management/commands/ - Django management commands for training
- /trained_models/ - Storage for trained model files (.joblib format)

================================================================================
2. DATA MODELS
================================================================================

2.1 Sensor Model:
- Fields: name, type, value, unit, status, last_updated, drift
- Types: Temperature, Pressure, Humidity, Vibration, Flow
- Status: online, warning, critical, offline

2.2 Reading Model:
- Fields: sensor (FK), raw_value, timestamp
- Stores raw sensor readings with timestamps

2.3 Calibration Model:
- Fields: sensor (FK), method, params (JSON), corrected_value, applied_at
- Methods: linear, polynomial, custom

2.4 Anomaly Model:
- Fields: sensor (FK), type, value, expected, deviation, severity, resolved, timestamp
- Types: Drift, Spike, Dropout, Noise, Calibration Error
- Severity: Low, Medium, High, Critical

================================================================================
3. ML MODEL TYPES
================================================================================

3.1 ANOMALY DETECTION MODELS
----------------------------
Algorithm: Isolation Forest (Scikit-learn)
Purpose: Detect unusual patterns in sensor readings

Training Process:
- Uses sensor readings with time-based features
- Features: [raw_value, hour_of_day, day_of_week]
- Contamination: 10% (expects 10% of data to be anomalies)
- N_estimators: 100 trees
- Random state: 42 for reproducibility

Model Files: anomaly_model_{sensor_name}_{sensor_id}.joblib

Training Requirements:
- Minimum 10 readings per sensor
- Uses all historical readings for training
- Creates time-based features for temporal patterns

3.2 DRIFT PREDICTION MODELS
---------------------------
Algorithm: Linear Regression (Scikit-learn)
Purpose: Predict sensor drift over time

Training Process:
- Uses time series data with rolling statistics
- Features: [previous_value, rolling_mean, rolling_std, time_since_start]
- Target: Next drift value (percentage from baseline)
- Window size: min(5, len(values)//4) for rolling calculations

Model Files: drift_model_{sensor_name}_{sensor_id}.joblib

Training Requirements:
- Minimum 20 readings per sensor
- Calculates drift as percentage deviation from baseline
- Uses rolling mean and standard deviation for trend analysis

3.3 CALIBRATION MODELS
----------------------
Algorithm: Linear Regression (Scikit-learn)
Purpose: Adaptive calibration correction

Training Process:
- Uses historical calibration data
- Features: [raw_value] (single feature)
- Target: corrected_value from past calibrations
- Requires readings before calibration events

Model Files: calibration_model_{sensor_name}_{sensor_id}.joblib

Training Requirements:
- Minimum 5 calibration records per sensor
- Minimum 3 calibration records with associated readings
- Uses average of 3 readings before each calibration

================================================================================
4. TRAINING WORKFLOW
================================================================================

4.1 Manual Training (Django Management Commands)
-----------------------------------------------
Command: python manage.py train_models

Options:
- --sensor-id: Train models for specific sensor
- --model-type: Choose model type (anomaly, drift, calibration, all)
- --all-sensors: Train models for all sensors

Example Usage:
- python manage.py train_models --sensor-id 13 --model-type anomaly
- python manage.py train_models --all-sensors --model-type all

4.2 Automatic Training
----------------------
Command: python manage.py auto_train_models

Features:
- Runs continuously with configurable intervals (default: 1 hour)
- Automatically detects sensors needing model updates
- Retrains models older than 7 days
- Can run once with --run-once flag

4.3 API-Based Training
----------------------
Endpoint: POST /api/model-training/

Parameters:
- sensor_id: Target sensor ID
- model_type: Type of model to train (anomaly, drift, calibration, all)

Response includes training results and model information.

================================================================================
5. EXISTING TRAINED MODELS
================================================================================

The system currently has 15 trained models across 7 sensors:

5.1 Sensors with Complete Model Sets:
- Compressor Pressure Sensor (ID: 18)
- Conveyor Vibration Sensor (ID: 15)  
- Cooling Tank Pressure (ID: 13)
- Humidity Chamber Sensor (ID: 14)
- Motor Vibration Sensor (ID: 20)
- Reactor Temp Sensor (ID: 17)
- Warehouse Humidity Sensor (ID: 19)

5.2 Model Distribution:
- 7 Anomaly Detection Models (one per sensor)
- 7 Drift Prediction Models (one per sensor)
- 1 Calibration Model (Cooling Tank Pressure only)

5.3 Model File Naming Convention:
{model_type}_model_{sensor_name}_{sensor_id}.joblib

================================================================================
6. ML SERVICES ARCHITECTURE
================================================================================

6.1 ModelTrainer Class (model_training.py)
------------------------------------------
Core training functionality:
- train_anomaly_detection_model()
- train_drift_prediction_model()
- train_calibration_model()
- train_all_models()
- get_model_info()

6.2 EnhancedMLServices Class (enhanced_ml_services.py)
-----------------------------------------------------
Production ML inference:
- predict_anomaly_with_trained_model()
- predict_drift_with_trained_model()
- apply_adaptive_calibration_with_trained_model()
- auto_train_models_if_needed()

6.3 MLAnalyticsService Class (ml_analytics.py)
----------------------------------------------
Analytics and monitoring:
- get_ml_statistics()
- auto_train_models_if_needed()
- Performance metrics calculation

6.4 Legacy Services
-------------------
- anomaly_ml.py: Basic anomaly detection
- drift_predictions.py: Simple drift prediction
- calibrations_ai.py: Basic adaptive calibration

================================================================================
7. MODEL INFERENCE WORKFLOW
================================================================================

7.1 Anomaly Detection Flow:
1. New sensor reading arrives
2. Load trained Isolation Forest model
3. Create feature vector: [value, hour, day_of_week]
4. Predict anomaly score and classification
5. Create Anomaly record if detected
6. Fallback to basic threshold detection if model unavailable

7.2 Drift Prediction Flow:
1. Request drift prediction for sensor
2. Load trained Linear Regression model
3. Calculate recent rolling statistics
4. Predict future drift values
5. Return predictions with confidence scores
6. Fallback to simple linear trend if model unavailable

7.3 Calibration Flow:
1. New raw reading needs correction
2. Load trained calibration model
3. Predict corrected value from raw value
4. Apply correction and store result
5. Fallback to basic linear correction if model unavailable

================================================================================
8. PERFORMANCE METRICS
================================================================================

8.1 Model Performance Tracking:
- Anomaly Detection Rate: ~95% (calculated from severity distribution)
- Drift Prediction Accuracy: ~92% (based on reading consistency)
- Calibration Improvement: ~88% (based on calibration frequency)

8.2 Model Lifecycle:
- Models retrained every 7 days automatically
- Minimum data requirements enforced
- Fallback mechanisms for missing models
- Error handling and logging throughout

================================================================================
9. API ENDPOINTS
================================================================================

9.1 Model Training:
- POST /api/model-training/ - Train models
- GET /api/model-training/ - Get model information

9.2 ML Analytics:
- GET /api/ml-analytics/ - Get ML statistics and performance metrics

9.3 Enhanced Anomaly Detection:
- POST /api/enhanced-anomaly-detection/ - Use trained models for detection

================================================================================
10. CONFIGURATION AND SETTINGS
================================================================================

10.1 Model Storage:
- Directory: /trained_models/
- Format: .joblib (scikit-learn serialization)
- Naming: {type}_model_{sensor_name}_{sensor_id}.joblib

10.2 Training Parameters:
- Isolation Forest: contamination=0.1, n_estimators=100, random_state=42
- Linear Regression: Default scikit-learn parameters
- Rolling window: min(5, len(values)//4)

10.3 Data Requirements:
- Anomaly models: 10+ readings
- Drift models: 20+ readings  
- Calibration models: 5+ calibrations, 3+ with readings

================================================================================
11. ERROR HANDLING AND FALLBACKS
================================================================================

11.1 Training Failures:
- Insufficient data: Returns error with minimum requirements
- Model loading errors: Falls back to basic algorithms
- File system errors: Logs errors and continues

11.2 Inference Failures:
- Missing models: Uses basic threshold/trend algorithms
- Prediction errors: Returns default values with error flags
- Data validation: Checks input ranges and formats

================================================================================
12. FUTURE ENHANCEMENTS
================================================================================

12.1 Potential Improvements:
- Deep learning models for complex patterns
- Real-time streaming model updates
- Cross-sensor correlation analysis
- Advanced feature engineering
- Model versioning and A/B testing

12.2 Scalability Considerations:
- Model serving optimization
- Distributed training capabilities
- Cloud storage for model artifacts
- Monitoring and alerting systems

================================================================================
13. USAGE EXAMPLES
================================================================================

13.1 Training a Single Model:
```bash
python manage.py train_models --sensor-id 13 --model-type anomaly
```

13.2 Training All Models for All Sensors:
```bash
python manage.py train_models --all-sensors --model-type all
```

13.3 Running Automatic Training:
```bash
python manage.py auto_train_models --interval 3600 --run-once
```

13.4 API Training Request:
```json
POST /api/model-training/
{
    "sensor_id": 13,
    "model_type": "anomaly"
}
```

================================================================================
14. TROUBLESHOOTING
================================================================================

14.1 Common Issues:
- "Not enough data": Ensure minimum reading requirements met
- "Model not found": Check if model file exists in trained_models/
- "Training failed": Check data quality and sensor status
- "Permission errors": Verify write access to trained_models directory

14.2 Debugging Steps:
1. Check sensor data availability
2. Verify model file existence and permissions
3. Review training logs for specific errors
4. Test with basic algorithms first
5. Validate input data formats

================================================================================
END OF SUMMARY
================================================================================

This summary provides a complete overview of the ML model training system in the 
Calibration Platform. The system is designed for industrial sensor monitoring 
with robust error handling, automatic retraining, and comprehensive analytics.

For detailed implementation, refer to the source code in the services/ directory
and management commands in the commands/ directory.
